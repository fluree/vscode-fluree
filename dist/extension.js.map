{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://fluree/./node_modules/isomorphic-fetch/fetch-npm-node.js","webpack://fluree/./src/helperFunctions.ts","webpack://fluree/external commonjs \"vscode\"","webpack://fluree/external commonjs2 \"node-fetch\"","webpack://fluree/external node-commonjs \"fs\"","webpack://fluree/webpack/bootstrap","webpack://fluree/./src/extension.ts"],"sourcesContent":["\"use strict\";\n\nvar realFetch = require('node-fetch');\nmodule.exports = function(url, options) {\n\tif (/^\\/\\//.test(url)) {\n\t\turl = 'https:' + url;\n\t}\n\treturn realFetch.call(this, url, options);\n};\n\nif (!global.fetch) {\n\tglobal.fetch = module.exports;\n\tglobal.Response = realFetch.Response;\n\tglobal.Headers = realFetch.Headers;\n\tglobal.Request = realFetch.Request;\n}\n","import * as fs from \"fs\";\nimport * as vscode from \"vscode\";\nconst fetch = require(\"isomorphic-fetch\");\n\ntype ConfigType = {\n  ip?: string;\n  apiKey?: string;\n  db?: string;\n  network?: string;\n};\n\nfunction writeToFile(filePath: string, txt: string) {\n  let body = typeof txt === \"string\" ? txt : JSON.stringify(txt, null, 2);\n  return fs.writeFileSync(filePath, body);\n}\n\nfunction hasApiKey(apiKey: string | undefined) {\n  if (typeof apiKey === \"undefined\" || apiKey.length === 0) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction getConfigFile(res: any): ConfigType {\n  let uri = res[0][\"path\"];\n  let network, db, ip, apiKey, _other: string;\n  vscode.workspace.openTextDocument(uri).then((doc) => {\n    const json = doc.getText();\n    const text = JSON.parse(json);\n    const { network, db, ip, apiKey } = text;\n  });\n  return {\n    network: network || \"\",\n    db: db || \"\",\n    ip: ip || \"\",\n    apiKey: apiKey || \"\",\n  };\n  //.catch((err) => vscode.window.showErrorMessage(err.message));\n}\n\nfunction getCurrentSelection() {\n  // From https://stackoverflow.com/questions/44175461/get-selected-text-into-a-variable-vscode\n  const editor = vscode.window.activeTextEditor;\n  if (editor) {\n    const selection = editor.selection;\n    const text = editor.document.getText(selection);\n    return text;\n  }\n}\n\nfunction parseJSON(response: any) {\n  return response\n    .json()\n    .then(function (json: any) {\n      const newResponse = Object.assign(response, { json });\n      return newResponse;\n    })\n    .catch((err: any) => {\n      let error = err.message || err;\n      vscode.window.showErrorMessage(JSON.stringify(error));\n    });\n}\n\nasync function sendReq(endpoint: string, body: string, extraHeaders = {}) {\n  const headers = { \"content-type\": \"application/json\", ...extraHeaders };\n\n  const fetchOpts = {\n    headers: headers,\n    method: \"POST\",\n    body: body,\n  };\n\n  return fetch(endpoint, fetchOpts)\n    .then((res: any) => parseJSON(res))\n    .then((res: any) => {\n      return res.json;\n    })\n    .then((res: any) => {\n      let status = res.status;\n      console.log(status);\n      if (res.error === \"db/invalid-action\") {\n        return vscode.window.showInformationMessage(\n          ` Are you using a version of Fluree that supports this endpoint? ${\n            status ? `Status: ${status}` : \"\"\n          }. Check flureeResponse.txt`\n        );\n      } else {\n        // return vscode.window.showInformationMessage(\n        //   `Submitted. ${\n        //     status ? `Status: ${status}` : \"\"\n        //   } Check flureeResponse.txt`\n        // );\n        return res;\n      }\n    })\n    .catch((err: any) => {\n      let error = err.message || err;\n      console.log(\"error: \", err);\n      vscode.window.showErrorMessage(JSON.stringify(error));\n    });\n  console.log(\"here\");\n}\n\nfunction checkExitPromise(res: any, exitedFunction: any) {\n  if (res === undefined) {\n    throw new Error(`The user exited ${exitedFunction}`);\n  } else {\n    return true;\n  }\n}\n\nfunction historyFetch(baseURL: string, _id: any, extraHeaders = {}) {\n  return fetch(`${baseURL}/history`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n      ...extraHeaders,\n    },\n    body: JSON.stringify({\n      history: _id,\n      prettyPrint: true,\n    }),\n  })\n    .then((res: any) => res.json())\n    .catch((err: any) => {\n      throw err;\n    });\n}\n\nfunction fetchSchemaSubjects(baseURL: string, extraHeaders = {}) {\n  return fetch(`${baseURL}/query`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n      ...extraHeaders,\n    },\n    body: JSON.stringify({\n      selectDistinct: \"?s\",\n      where: [\n        {\n          union: [\n            [[\"?s\", \"rdf:type\", \"_collection\"]],\n            [[\"?s\", \"rdf:type\", \"_predicate\"]],\n          ],\n        },\n      ],\n      opts: {\n        limit: 9999,\n      },\n    }),\n  })\n    .then((res: any) => parseJSON(res))\n    .then((res: any) => res.json);\n}\n\nasync function fetchHistory(res: any, baseURL: string, extraHeaders = {}) {\n  if (res.error) {\n    throw new Error(res.message || res.error);\n  }\n  const historyMap = res.map(\n    (el: any) => () => historyFetch(baseURL, el, extraHeaders)\n  );\n  let index = 0;\n  const results = [];\n  while (historyMap.length > index) {\n    const newResults = await Promise.all(\n      historyMap.slice(index, index + 20).map((fn: any) => fn())\n    );\n    results.push(...newResults.flat());\n    index += 20;\n  }\n  return results;\n}\n\nfunction reduceHistory(res: any) {\n  let subjectMap: { [key: number]: any; [name: string]: any } = {};\n  const sortedRes = res\n    .filter((el: any) => el.block > 1 && el.asserted[0])\n    .sort((a: any, b: any) => a.block - b.block);\n  return sortedRes.reduce((prev: any, cur: any) => {\n    const asserted = cur.asserted.map(\n      (_tx: { _id: any; [name: string]: any }) => {\n        if (!subjectMap[_tx._id]) {\n          subjectMap[_tx._id] = Object.keys(_tx).some((el) =>\n            /^_collection/.test(el)\n          )\n            ? [\"_collection/name\", _tx[\"_collection/name\"]]\n            : [\"_predicate/name\", _tx[\"_predicate/name\"]];\n          _tx._id = Object.keys(_tx).some((el) => /^_collection/.test(el))\n            ? \"_collection\"\n            : \"_predicate\";\n        } else {\n          _tx._id = subjectMap[_tx._id];\n        }\n        return _tx;\n      }\n    );\n    if (prev[cur.block]) {\n      prev[cur.block] = [...prev[cur.block], ...asserted];\n    } else {\n      prev[cur.block] = asserted;\n    }\n    return prev;\n  }, {});\n}\n\nfunction writeDirectory(blockIndex: any, root: string) {\n  return new Promise((resolve, reject) => {\n    fs.mkdirSync(`${root}/migrations`, { recursive: true });\n    resolve(blockIndex);\n  });\n}\n\nfunction writeMigrations(blockIndex: any, root: string) {\n  const blockNos = Object.keys(blockIndex);\n  blockNos.forEach(async (block, index) => {\n    await fs.writeFile(\n      `${root}/migrations/${String(index).padStart(5, \"0\")}.json`,\n      JSON.stringify(blockIndex[block]),\n      (err) => {\n        if (err) {\n          throw err;\n        }\n      }\n    );\n  });\n  return vscode.window.showInformationMessage(\n    `Success. Check migrations/ in your root directory`\n  );\n}\n\nfunction fetchMigrations(baseURL: string, root: string, options = {}) {\n  return fetchSchemaSubjects(baseURL, options)\n    .then((res: any) => fetchHistory(res, baseURL, options))\n    .then(reduceHistory)\n    .then((blockIndex: any) => writeDirectory(blockIndex, root))\n    .then((blockIndex: any) => writeMigrations(blockIndex, root))\n    .catch((err: any) => {\n      let error = err.message || err;\n      return vscode.window.showErrorMessage(JSON.stringify(error));\n    });\n}\n\nexport {\n  getConfigFile,\n  getCurrentSelection,\n  sendReq,\n  checkExitPromise,\n  fetchMigrations,\n  hasApiKey,\n};\n","module.exports = require(\"vscode\");","module.exports = require(\"node-fetch\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport path = require(\"path\");\nimport * as vscode from \"vscode\";\nimport {\n  getConfigFile,\n  getCurrentSelection,\n  sendReq,\n  checkExitPromise,\n  fetchMigrations,\n  hasApiKey,\n} from \"./helperFunctions\";\n\nconst showResults = (results: any) => {\n  return vscode.workspace\n    .openTextDocument({\n      language: \"json\",\n      content: JSON.stringify(results, null, 2),\n    })\n    .then((doc) => {\n      return vscode.window.showTextDocument(doc);\n    });\n};\n\nfunction updateConfig(key: string, value: string) {\n  const settings = vscode.workspace.getConfiguration(\"fluree\", null);\n  try {\n    settings.update(key, value, vscode.ConfigurationTarget.Global);\n  } catch (error) {\n    console.log(\"update error: \", error);\n  }\n}\n\nexport async function activate(context: vscode.ExtensionContext) {\n  let config = vscode.workspace.getConfiguration(\"fluree\", null);\n  let root = vscode.workspace.rootPath;\n\n  let setTestConfig = vscode.commands.registerCommand(\n    \"extension.setTestConfig\",\n    () => {\n      //config = { ip: \"http://localhost:8090\", network: \"test\", db: \"test\" };\n    }\n  );\n\n  let setNexusConfig = vscode.commands.registerCommand(\n    \"extension.setNexusConfig\",\n    () => {\n      vscode.window\n        .showInputBox({\n          prompt: `Please input the connection string found on the Connect tab of your Nexus dataset page `,\n          value: \"\",\n        })\n        .then((res) => {\n          //check format of splitting url, network, db\n          //\"https://api.dev.flur.ee/fdb/fluree/387028092977278\"\n          if (res) {\n            const url = new URL(res);\n            const base = url.host;\n            const path = url.pathname;\n            const [_blank, _fdb, network, db] = path.split(\"/\");\n            updateConfig(\"network\", network);\n            updateConfig(\"db\", db);\n            updateConfig(\"host\", `https://${base}`);\n            return vscode.window.showInputBox({\n              prompt:\n                \"Please enter the api_key you created on the Nexus dataset Connect tab\",\n              value: \"\",\n            });\n          }\n        })\n        .then((res) => {\n          if (res) {\n            updateConfig(\"apiKey\", res);\n          }\n        })\n        .then((_res) => {\n          config = vscode.workspace.getConfiguration(\"fluree\", null);\n          vscode.window.showInformationMessage(\n            \"Config set. \" +\n              \"Network: \" +\n              config.network +\n              \" Db: \" +\n              config.db +\n              \" Host: \" +\n              config.host +\n              \" apiKey: \" +\n              (config.apiKey || \"\")\n          );\n        });\n    }\n  );\n\n  let setConfig = vscode.commands.registerCommand(\"extension.setConfig\", () => {\n    vscode.window\n      .showInputBox({\n        prompt: `Please input the host address (and port) where your db is running. For example: http://localhost:8090: `,\n        value: config.host || \"\",\n      })\n      .then((res) => {\n        if (res) {\n          updateConfig(\"host\", res);\n          return vscode.window.showInputBox({\n            prompt: `Please input the network your database is in: `,\n            value: config.network || \"\",\n          });\n        }\n      })\n      .then((res) => {\n        if (res) {\n          updateConfig(\"network\", res);\n          return vscode.window.showInputBox({\n            prompt: `Please input your database name: `,\n            value: config.db || \"\",\n          });\n        }\n      })\n      .then((res) => {\n        if (res) {\n          updateConfig(\"db\", res);\n          return vscode.window.showInputBox({\n            prompt: `Please input your api key if using Nexus: `,\n            value: config.apiKey || \"\",\n          });\n        }\n      })\n      .then((res) => {\n        if (res) {\n          updateConfig(\"apiKey\", res);\n        }\n      })\n      .then((_res) => {\n        config = vscode.workspace.getConfiguration(\"fluree\", null);\n        vscode.window.showInformationMessage(\n          \"Config set. \" +\n            \"Network: \" +\n            config.network +\n            \" Db: \" +\n            config.db +\n            \" Host: \" +\n            config.host +\n            \" apiKey: \" +\n            (config.apiKey || \"\")\n        );\n      });\n  });\n\n  let getConfig = vscode.commands.registerCommand(\"extension.getConfig\", () => {\n    config = vscode.workspace.getConfiguration(\"fluree\", null);\n    vscode.window.showInformationMessage(\n      \"Config. \" +\n        \"Network: \" +\n        config.network +\n        \" Db: \" +\n        config.db +\n        \" Host: \" +\n        config.host +\n        \" apiKey: \" +\n        (config.apiKey || \"\")\n    );\n  });\n\n  let submitTransaction = vscode.commands.registerCommand(\n    \"extension.submitTransaction\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.host}/fdb/${config.network}/${config.db}/transact`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitQuery = vscode.commands.registerCommand(\n    \"extension.submitQuery\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.host}/fdb/${config.network}/${config.db}/query`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        //return sendReq(endpoint, txn, root, headers);\n        sendReq(endpoint, txn, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitHistoryQuery = vscode.commands.registerCommand(\n    \"extension.submitHistoryQuery\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.host}/fdb/${config.network}/${config.db}/history`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitBlockQuery = vscode.commands.registerCommand(\n    \"extension.submitBlockQuery\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.host}/fdb/${config.network}/${config.db}/block`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitMultiQuery = vscode.commands.registerCommand(\n    \"extension.submitMultiQuery\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.host}/fdb/${config.network}/${config.db}/multi-query`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitQueryWith = vscode.commands.registerCommand(\n    \"extension.submitQueryWith\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.host}/fdb/${config.network}/${config.db}/query-with`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitGenFlakes = vscode.commands.registerCommand(\n    \"extension.submitGenFlakes\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.host}/fdb/${config.network}/${config.db}/gen-flakes`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitTestTransactWith = vscode.commands.registerCommand(\n    \"extension.submitTestTransactWith\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.host}/fdb/${config.network}/${config.db}/test-transact-with`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let getMigrations = vscode.commands.registerCommand(\n    \"extension.getMigrations\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let endpoint = `${config.host}/fdb/${config.network}/${config.db}`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return fetchMigrations(endpoint, root || \"/tmp\", headers);\n      }\n    }\n  );\n\n  context.subscriptions.push(\n    setTestConfig,\n    setNexusConfig,\n    setConfig,\n    getConfig,\n    submitTransaction,\n    submitQuery,\n    submitHistoryQuery,\n    submitBlockQuery,\n    submitMultiQuery,\n    submitQueryWith,\n    submitGenFlakes,\n    submitTestTransactWith,\n    getMigrations\n  );\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["realFetch","module","exports","url","options","test","call","this","global","fetch","Response","Headers","Request","parseJSON","response","json","then","Object","assign","catch","err","error","message","vscode","window","showErrorMessage","JSON","stringify","reduceHistory","res","subjectMap","filter","el","block","asserted","sort","a","b","reduce","prev","cur","map","_tx","_id","keys","some","hasApiKey","apiKey","length","getConfigFile","uri","workspace","openTextDocument","doc","getText","text","parse","network","db","ip","getCurrentSelection","editor","activeTextEditor","selection","document","sendReq","async","endpoint","body","extraHeaders","headers","method","status","console","log","showInformationMessage","checkExitPromise","exitedFunction","undefined","Error","fetchMigrations","baseURL","root","selectDistinct","where","union","opts","limit","fetchSchemaSubjects","historyMap","history","prettyPrint","historyFetch","index","results","newResults","Promise","all","slice","fn","push","flat","fetchHistory","blockIndex","resolve","reject","fs","mkdirSync","recursive","writeDirectory","forEach","writeFile","String","padStart","writeMigrations","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","showResults","language","content","showTextDocument","updateConfig","key","value","settings","getConfiguration","update","ConfigurationTarget","Global","context","config","rootPath","setTestConfig","commands","registerCommand","setNexusConfig","showInputBox","prompt","URL","base","host","path","pathname","_blank","_fdb","split","_res","setConfig","getConfig","submitTransaction","txn","authorization","submitQuery","submitHistoryQuery","submitBlockQuery","submitMultiQuery","submitQueryWith","submitGenFlakes","submitTestTransactWith","getMigrations","subscriptions"],"sourceRoot":""}