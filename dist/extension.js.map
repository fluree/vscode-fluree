{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://fluree/./node_modules/isomorphic-fetch/fetch-npm-node.js","webpack://fluree/./src/helperFunctions.ts","webpack://fluree/external commonjs \"vscode\"","webpack://fluree/external commonjs2 \"node-fetch\"","webpack://fluree/external node-commonjs \"fs\"","webpack://fluree/webpack/bootstrap","webpack://fluree/./src/extension.ts"],"sourcesContent":["\"use strict\";\n\nvar realFetch = require('node-fetch');\nmodule.exports = function(url, options) {\n\tif (/^\\/\\//.test(url)) {\n\t\turl = 'https:' + url;\n\t}\n\treturn realFetch.call(this, url, options);\n};\n\nif (!global.fetch) {\n\tglobal.fetch = module.exports;\n\tglobal.Response = realFetch.Response;\n\tglobal.Headers = realFetch.Headers;\n\tglobal.Request = realFetch.Request;\n}\n","import * as fs from \"fs\";\nimport * as vscode from \"vscode\";\nconst fetch = require(\"isomorphic-fetch\");\n\ntype ConfigType = {\n  ip?: string;\n  apiKey?: string;\n  db?: string;\n  network?: string;\n};\n\nfunction writeToFile(filePath: string, txt: string) {\n  let body = typeof txt === \"string\" ? txt : JSON.stringify(txt, null, 2);\n  return fs.writeFileSync(filePath, body);\n}\n\nfunction hasApiKey(apiKey: string | undefined) {\n  if (typeof apiKey === \"undefined\" || apiKey.length === 0) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction getConfigFile(res: any): ConfigType {\n  let uri = res[0][\"path\"];\n  let network, db, ip, apiKey, _other: string;\n  vscode.workspace.openTextDocument(uri).then((doc) => {\n    const json = doc.getText();\n    const text = JSON.parse(json);\n    const { network, db, ip, apiKey } = text;\n  });\n  return {\n    network: network || \"\",\n    db: db || \"\",\n    ip: ip || \"\",\n    apiKey: apiKey || \"\",\n  };\n  //.catch((err) => vscode.window.showErrorMessage(err.message));\n}\n\nfunction getCurrentSelection() {\n  // From https://stackoverflow.com/questions/44175461/get-selected-text-into-a-variable-vscode\n  const editor = vscode.window.activeTextEditor;\n  if (editor) {\n    const selection = editor.selection;\n    const text = editor.document.getText(selection);\n    return text;\n  }\n}\n\nfunction parseJSON(response: any) {\n  return response\n    .json()\n    .then(function (json: any) {\n      const newResponse = Object.assign(response, { json });\n      return newResponse;\n    })\n    .catch((err: any) => {\n      let error = err.message || err;\n      vscode.window.showErrorMessage(JSON.stringify(error));\n    });\n}\n\nasync function sendReq(\n  endpoint: string,\n  body: string,\n  root: string,\n  extraHeaders = {}\n) {\n  const headers = { \"content-type\": \"application/json\", ...extraHeaders };\n\n  const fetchOpts = {\n    headers: headers,\n    method: \"POST\",\n    body: body,\n  };\n  console.log(\"fetching: \", `${endpoint}: ${JSON.stringify(fetchOpts)}`);\n  return fetch(endpoint, fetchOpts)\n    .then((res: any) => parseJSON(res))\n    .then((res: any) => {\n      console.log(\"response in fetch: \", res.json);\n      return res.json;\n    })\n    .then((res: any) => {\n      const filePath = `${root}/flureeResponse.txt`;\n      //writeToFile(filePath, res);\n      return res;\n    })\n    .then((res: any) => {\n      let status = res.status;\n      console.log(status);\n      if (res.error === \"db/invalid-action\") {\n        return vscode.window.showInformationMessage(\n          ` Are you using a version of Fluree that supports this endpoint? ${\n            status ? `Status: ${status}` : \"\"\n          }. Check flureeResponse.txt`\n        );\n      } else {\n        // return vscode.window.showInformationMessage(\n        //   `Submitted. ${\n        //     status ? `Status: ${status}` : \"\"\n        //   } Check flureeResponse.txt`\n        // );\n        return res;\n      }\n    })\n    .catch((err: any) => {\n      let error = err.message || err;\n      console.log(\"error: \", err);\n      vscode.window.showErrorMessage(JSON.stringify(error));\n    });\n  console.log(\"here\");\n}\n\nfunction checkExitPromise(res: any, exitedFunction: any) {\n  if (res === undefined) {\n    throw new Error(`The user exited ${exitedFunction}`);\n  } else {\n    return true;\n  }\n}\n\nfunction historyFetch(baseURL: string, _id: any) {\n  return fetch(`${baseURL}/history`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      history: _id,\n      prettyPrint: true,\n    }),\n  })\n    .then((res: any) => res.json())\n    .catch((err: any) => {\n      throw err;\n    });\n}\n\nfunction fetchSchemaSubjects(baseURL: string, extraHeaders = {}) {\n  return fetch(`${baseURL}/query`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n      ...extraHeaders,\n    },\n    body: JSON.stringify({\n      selectDistinct: \"?s\",\n      where: [\n        {\n          union: [\n            [[\"?s\", \"rdf:type\", \"_collection\"]],\n            [[\"?s\", \"rdf:type\", \"_predicate\"]],\n          ],\n        },\n      ],\n      opts: {\n        limit: 9999,\n      },\n    }),\n  })\n    .then((res: any) => parseJSON(res))\n    .then((res: any) => res.json);\n}\n\nasync function fetchHistory(res: any, baseURL: string) {\n  if (res.error) {\n    throw new Error(res.message || res.error);\n  }\n  const historyMap = res.map((el: any) => () => historyFetch(baseURL, el));\n  let index = 0;\n  const results = [];\n  while (historyMap.length > index) {\n    const newResults = await Promise.all(\n      historyMap.slice(index, index + 20).map((fn: any) => fn())\n    );\n    results.push(...newResults.flat());\n    index += 20;\n  }\n  return results;\n}\n\nfunction reduceHistory(res: any) {\n  let subjectMap: { [key: number]: any; [name: string]: any };\n  const sortedRes = res\n    .filter((el: any) => el.block > 1 && el.asserted[0])\n    .sort((a: any, b: any) => a.block - b.block);\n  return sortedRes.reduce((prev: any, cur: any) => {\n    const asserted = cur.asserted.map(\n      (_tx: { _id: any; [name: string]: any }) => {\n        if (!subjectMap[_tx._id]) {\n          subjectMap[_tx._id] = Object.keys(_tx).some((el) =>\n            /^_collection/.test(el)\n          )\n            ? [\"_collection/name\", _tx[\"_collection/name\"]]\n            : [\"_predicate/name\", _tx[\"_predicate/name\"]];\n          _tx._id = Object.keys(_tx).some((el) => /^_collection/.test(el))\n            ? \"_collection\"\n            : \"_predicate\";\n        } else {\n          _tx._id = subjectMap[_tx._id];\n        }\n        return _tx;\n      }\n    );\n    if (prev[cur.block]) {\n      prev[cur.block] = [...prev[cur.block], ...asserted];\n    } else {\n      prev[cur.block] = asserted;\n    }\n    return prev;\n  }, {});\n}\n\nfunction writeDirectory(blockIndex: any, root: string) {\n  return new Promise((resolve, reject) => {\n    fs.mkdirSync(`${root}/migrations`, { recursive: true });\n    resolve(blockIndex);\n  });\n}\n\nfunction writeMigrations(blockIndex: any, root: string) {\n  const blockNos = Object.keys(blockIndex);\n  blockNos.forEach(async (block, index) => {\n    await fs.writeFile(\n      `${root}/migrations/${String(index).padStart(5, \"0\")}.json`,\n      JSON.stringify(blockIndex[block]),\n      (err) => {\n        if (err) {\n          throw err;\n        }\n      }\n    );\n  });\n  return vscode.window.showInformationMessage(\n    `Success. Check migrations/ in your root directory`\n  );\n}\n\nfunction fetchMigrations(baseURL: string, root: string, options = {}) {\n  return fetchSchemaSubjects(baseURL, options)\n    .then((res: any) => fetchHistory(res, baseURL))\n    .then(reduceHistory)\n    .then((blockIndex: any) => writeDirectory(blockIndex, root))\n    .then((blockIndex: any) => writeMigrations(blockIndex, root))\n    .catch((err: any) => {\n      let error = err.message || err;\n      return vscode.window.showErrorMessage(JSON.stringify(error));\n    });\n}\n\nexport {\n  getConfigFile,\n  getCurrentSelection,\n  sendReq,\n  checkExitPromise,\n  fetchMigrations,\n  hasApiKey,\n};\n","module.exports = require(\"vscode\");","module.exports = require(\"node-fetch\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\nimport {\n  getConfigFile,\n  getCurrentSelection,\n  sendReq,\n  checkExitPromise,\n  fetchMigrations,\n  hasApiKey,\n} from \"./helperFunctions\";\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\ntype ConfigType = {\n  ip?: string;\n  apiKey?: string;\n  db?: string;\n  network?: string;\n};\n\nconst showResults = (results: any) => {\n  return vscode.workspace\n    .openTextDocument({\n      language: \"json\",\n      content: JSON.stringify(results, null, 2),\n    })\n    .then((doc) => {\n      return vscode.window.showTextDocument(doc);\n    });\n};\n\nexport async function activate(context: vscode.ExtensionContext) {\n  let config: ConfigType = {};\n  let root = vscode.workspace.rootPath || \"\";\n\n  let setTestConfig = vscode.commands.registerCommand(\n    \"extension.setTestConfig\",\n    () => {\n      config = { ip: \"http://localhost:8090\", network: \"test\", db: \"test\" };\n    }\n  );\n\n  let setConfig = vscode.commands.registerCommand(\"extension.setConfig\", () => {\n    vscode.workspace\n      .findFiles(\"flureeConfig.json\", null, 1)\n      .then((res: any) => {\n        if (res.length === 0) {\n          let myConfig: ConfigType = {};\n          return vscode.window\n            .showInputBox({\n              prompt: `No 'flureeConfig.json' found. Please input the IP address where your db is running. For example: http://localhost:8090: `,\n              value: \"IP\",\n            })\n            .then((res) => {\n              if (res) {\n                myConfig[\"ip\"] = res;\n                return vscode.window.showInputBox({\n                  prompt: `Please input the network your database is in: `,\n                  value: \"Network\",\n                });\n              }\n            })\n            .then((res) => {\n              if (res) {\n                myConfig[\"network\"] = res;\n                return vscode.window.showInputBox({\n                  prompt: `Please input your database name: `,\n                  value: \"Database\",\n                });\n              }\n            })\n            .then((res) => {\n              if (res) {\n                myConfig[\"db\"] = res;\n                return vscode.window.showInputBox({\n                  prompt: `Please input your api key if using Nexus: `,\n                });\n              }\n            })\n            .then((res) => {\n              if (res) {\n                myConfig[\"apiKey\"] = res;\n                return myConfig;\n              } else {\n                return myConfig;\n              }\n            });\n\n          // .catch((err) =>\n          //   vscode.showErrorMessage(\n          //     \"There was an error in setting the configuration. \",\n          //     JSON.stringify(err)\n          //   )\n          // );\n        } else {\n          return getConfigFile(res);\n        }\n      })\n      .then((res) => {\n        if (typeof res !== \"undefined\") {\n          config = res;\n        }\n      })\n      .then((_res) =>\n        vscode.window.showInformationMessage(\n          \"Config set. \" +\n            \"Network: \" +\n            config.network +\n            \" Db: \" +\n            config.db +\n            \" IP: \" +\n            config.ip +\n            \" apiKey: \" +\n            (config.apiKey || \"\")\n        )\n      );\n    // .catch((err) =>\n    //   vscode.showErrorMessage(\n    //     \"There was an error in setting the configuration. \",\n    //     JSON.stringify(err)\n    //   )\n    // );\n  });\n\n  let getConfig = vscode.commands.registerCommand(\"extension.getConfig\", () => {\n    vscode.window.showInformationMessage(\n      \"Config. \" +\n        \"Network: \" +\n        config.network +\n        \" Db: \" +\n        config.db +\n        \" IP: \" +\n        config.ip +\n        \" apiKey: \" +\n        (config.apiKey || \"\")\n    );\n  });\n\n  let submitTransaction = vscode.commands.registerCommand(\n    \"extension.submitTransaction\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.ip}/fdb/${config.network}/${config.db}/transact`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, root, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitQuery = vscode.commands.registerCommand(\n    \"extension.submitQuery\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.ip}/fdb/${config.network}/${config.db}/query`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        //return sendReq(endpoint, txn, root, headers);\n        sendReq(endpoint, txn, root, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitHistoryQuery = vscode.commands.registerCommand(\n    \"extension.submitHistoryQuery\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.ip}/fdb/${config.network}/${config.db}/history`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, root, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitBlockQuery = vscode.commands.registerCommand(\n    \"extension.submitBlockQuery\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.ip}/fdb/${config.network}/${config.db}/block`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, root, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitMultiQuery = vscode.commands.registerCommand(\n    \"extension.submitMultiQuery\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.ip}/fdb/${config.network}/${config.db}/multi-query`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, root, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitQueryWith = vscode.commands.registerCommand(\n    \"extension.submitQueryWith\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.ip}/fdb/${config.network}/${config.db}/query-with`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, root, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitGenFlakes = vscode.commands.registerCommand(\n    \"extension.submitGenFlakes\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.ip}/fdb/${config.network}/${config.db}/gen-flakes`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, root, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let submitTestTransactWith = vscode.commands.registerCommand(\n    \"extension.submitTestTransactWith\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let txn = getCurrentSelection() || \"\";\n        let endpoint = `${config.ip}/fdb/${config.network}/${config.db}/test-transact-with`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return sendReq(endpoint, txn, root, headers)\n          .then((results: any) => showResults(results))\n          .catch((err: any) => console.log(\"error: \", err));\n      }\n    }\n  );\n\n  let getMigrations = vscode.commands.registerCommand(\n    \"extension.getMigrations\",\n    () => {\n      if (Object.keys(config).length === 0) {\n        vscode.window.showErrorMessage(\n          \"Please connect to a database first. `Fluree: Set Config`\"\n        );\n      } else {\n        let endpoint = `${config.ip}/fdb/${config.network}/${config.db}`;\n        let headers = {};\n        if (hasApiKey(config.apiKey)) {\n          headers = { authorization: `Bearer ${config.apiKey}` };\n        }\n        return fetchMigrations(endpoint, root, headers);\n      }\n    }\n  );\n\n  context.subscriptions.push(\n    setTestConfig,\n    setConfig,\n    getConfig,\n    submitTransaction,\n    submitQuery,\n    submitHistoryQuery,\n    submitBlockQuery,\n    submitMultiQuery,\n    submitQueryWith,\n    submitGenFlakes,\n    submitTestTransactWith,\n    getMigrations\n  );\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["realFetch","module","exports","url","options","test","call","this","global","fetch","Response","Headers","Request","parseJSON","response","json","then","Object","assign","catch","err","error","message","vscode","window","showErrorMessage","JSON","stringify","reduceHistory","res","subjectMap","filter","el","block","asserted","sort","a","b","reduce","prev","cur","map","_tx","_id","keys","some","hasApiKey","apiKey","length","getConfigFile","uri","workspace","openTextDocument","doc","getText","text","parse","network","db","ip","getCurrentSelection","editor","activeTextEditor","selection","document","sendReq","async","endpoint","body","root","extraHeaders","fetchOpts","headers","method","console","log","status","showInformationMessage","checkExitPromise","exitedFunction","undefined","Error","fetchMigrations","baseURL","selectDistinct","where","union","opts","limit","fetchSchemaSubjects","historyMap","history","prettyPrint","historyFetch","index","results","newResults","Promise","all","slice","fn","push","flat","fetchHistory","blockIndex","resolve","reject","fs","mkdirSync","recursive","writeDirectory","forEach","writeFile","String","padStart","writeMigrations","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","showResults","language","content","showTextDocument","context","config","rootPath","setTestConfig","commands","registerCommand","setConfig","findFiles","myConfig","showInputBox","prompt","value","_res","getConfig","submitTransaction","txn","authorization","submitQuery","submitHistoryQuery","submitBlockQuery","submitMultiQuery","submitQueryWith","submitGenFlakes","submitTestTransactWith","getMigrations","subscriptions"],"sourceRoot":""}